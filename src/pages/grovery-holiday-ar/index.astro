---
//Essential Components
import ARLayout from '@layouts/AR-Layout.astro';

let defaultRotation = "wall"; // "flat" or "wall"
let rotationSetting = "";
let positionSetting = "";

//Wall surface configuration - 
let WallRotationSetting = "0 0 0";		//don't change
let WallpositionSetting = "0 0 0.1";	//change as needed

//Flat surface configuration
let FlatRotationSetting = "90 0 0";		//don't change
let FlatpositionSetting = "0 0 0.1";	//probably don't change

//Card surface configuration
let CardRotationSetting = "90 0 0";		//don't change
let CardpositionSetting = "0 0 0.1";	//change as needed





if(defaultRotation == "flat"){
	rotationSetting = "90 0 0";
	positionSetting = "0 0 0.1";
}else{
	rotationSetting = "0 0 0";
	positionSetting = "0 0 0.1";
}

---

<ARLayout 
	title="AR_Test_1"
	heading=""
>

<div class="controls">
	<div 
		class="controlButton" 
		data-control-button="wall"
	>
		Switch View: Wall
	</div>

	<div 
		class="controlButton" 
		data-control-button="flat"
	>
		Switch View: Flat
	</div>
</div>

<a-scene 
mindar-image="imageTargetSrc: /markers/grovery-holiday-marker-v2.mind"
color-space="sRGB" 
renderer="colorManagement: true, physicallyCorrectLights" 
vr-mode-ui="false" 
xr-mode-ui="enabled: false"
device-orientation-permission-ui="enabled: false"
>
<a-assets>
	<!-- <img id="card" src="https://cdn.jsdelivr.net/gh/hiukim/mind-ar-js@1.2.5/examples/image-tracking/assets/card-example/card.png" /> -->
	<a-asset-item 
		id="displayModel" 
		src="/3d-objects/snowman/scene.gltf"
	></a-asset-item>
</a-assets>

<a-camera 
	position="0 0 0" 
	look-controls="enabled: false"
></a-camera>

<a-entity 
	mindar-image-target="targetIndex: 0"
>
	<a-entity
		id="objectWrapper"
		rotation={rotationSetting ? rotationSetting : "90 0 0"}
		position={positionSetting ? positionSetting : "0 0 0.1"}
		data-rotation-setting="flat"
		
		data-wall-position={WallpositionSetting}
		data-wall-rotation={WallRotationSetting}

		data-flat-position={FlatpositionSetting}
		data-flat-rotation={FlatRotationSetting}

		data-card-position={CardpositionSetting}
		data-card-rotation={CardRotationSetting}
		
	>
		<!-- <a-plane src="#card" position="0 0 0" height="0.552" width="1" rotation="0 0 0"></a-plane> -->
		<a-gltf-model 
			rotation="0 0 0" 
			position="0 0 0.1" 
			scale="0.5 0.5 0.5" 
			src="#displayModel"
			animation="property: rotation; to: 0 360 0; loop: true; dur: 10000; easing: linear;"
		/>
	</a-entity>
</a-entity>
</a-scene>

</ARLayout>


<style lang="scss">
.controls{
	position: fixed;
	z-index: 500000;
	bottom: 5px;
	left: 50%;
	transform:translate(-50%, 0%);
	display: flex;
	justify-content: center;
	align-items: center;
	width: 100%;
	max-width: 500px;
	margin: auto;

	.controlButton{
		//width: 175px;
		margin: 0 10px;
		border: solid 2px #FFF;
		padding: 0.25em 0.5em;
		color: #FFF;
		font-size: clamp(18px, 5vw, 36px);
		text-align: center;
		display: none; // Hide buttons by default
	}

	// Show the appropriate button based on the current rotation setting
	&[data-current-rotation="wall"] .controlButton[data-control-button="flat"],
	&[data-current-rotation="flat"] .controlButton[data-control-button="wall"] {
		display: block;
	}
}
</style>

<script>
	function positionSet(){
		//DOM elements
		let objectWrapper = document.querySelector('#objectWrapper');
		let controlsContainer = document.querySelector('.controls');
		let controlButtonWall = document.querySelector('.controlButton[data-control-button="wall"]');
		let controlButtonFlat = document.querySelector('.controlButton[data-control-button="flat"]');

		//Data Variables
		//Wall settings
		let wallRotationSetting = objectWrapper?.getAttribute("data-wall-rotation");
		let wallPositionSetting = objectWrapper?.getAttribute("data-wall-position");
		//Flat settings
		let flatRotationSetting = objectWrapper?.getAttribute("data-flat-rotation");
		let flatPositionSetting = objectWrapper?.getAttribute("data-flat-position");
		//Card settings
		let cardRotationSetting = objectWrapper?.getAttribute("data-card-rotation");
		let cardPositionSetting = objectWrapper?.getAttribute("data-card-position");

		function updateObjectWrapperSettings(viewType){
			if(viewType == "wall"){
				objectWrapper?.setAttribute("rotation", wallRotationSetting);
				objectWrapper?.setAttribute("position", wallPositionSetting);
				updateButtonVisibility(viewType);
			} else if(viewType == "flat"){
				objectWrapper?.setAttribute("rotation", flatRotationSetting);
				objectWrapper?.setAttribute("position", flatPositionSetting);
				updateButtonVisibility(viewType);
			} else if(viewType == "card"){
				objectWrapper?.setAttribute("rotation", cardRotationSetting);
				objectWrapper?.setAttribute("position", cardPositionSetting);
				updateButtonVisibility(viewType);
			} else{
				console.log("No view type found");
			}
		}

		function updateButtonVisibility(rotationSetting) {
			controlsContainer?.setAttribute('data-current-rotation', rotationSetting);
		}

		controlButtonWall?.addEventListener('click', function() {
			console.log("controlButtonWall click");
			updateObjectWrapperSettings("wall");
		});

		controlButtonFlat?.addEventListener('click', function() {
			console.log("controlButtonFlat click");
			objectWrapper?.setAttribute("data-rotation-setting", "flat");
			updateObjectWrapperSettings("flat");
		});

		// Initialize button visibility based on initial rotation setting
		updateButtonVisibility(objectWrapper?.getAttribute("data-rotation-setting") || "flat");
	}


	

	function checkUrlPosition() {
		const params = new URLSearchParams(window.location.search);
		const position = params.get('position');
		let objectWrapper = document.querySelector('#objectWrapper');
		let controlsContainer = document.querySelector('.controls');

		function updateButtonVisibility(rotationSetting) {
			controlsContainer?.setAttribute('data-current-rotation', rotationSetting);
		}

		if (position === 'wall') {
			console.log("URL position: wall");
			objectWrapper?.setAttribute("data-rotation-setting", "wall");
			objectWrapper?.setAttribute("rotation", "0 0 0");
			updateButtonVisibility("wall");
		} else if (position === 'flat') {
			console.log("URL position: flat"); 
			objectWrapper?.setAttribute("data-rotation-setting", "flat");
			objectWrapper?.setAttribute("rotation", "90 0 0");
			updateButtonVisibility("flat");
		}
	}

	//Run functions
	document.addEventListener('DOMContentLoaded', checkUrlPosition);
	document.addEventListener('DOMContentLoaded', positionSet); 

</script>